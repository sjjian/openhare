// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import '../repositories/instances/instances.dart';
import '../repositories/sessions.dart';
import '../repositories/settings/settings.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 954363933915371259),
    name: 'SessionStorage',
    lastPropertyId: const obx_int.IdUid(4, 2680331308371878199),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 517178709276681653),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4854003834765344230),
        name: 'instanceId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 3493315780447542151),
        relationTarget: 'InstanceStorage',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4040787782661306959),
        name: 'text',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2680331308371878199),
        name: 'currentSchema',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 9068295192823040783),
    name: 'InstanceStorage',
    lastPropertyId: const obx_int.IdUid(13, 8749264689524785390),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6332533221694692916),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7941998142696236769),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 224238240568187224),
        name: 'host',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7469078253827869925),
        name: 'port',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1537637767970384375),
        name: 'user',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8389525849330073772),
        name: 'password',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2870873381397993482),
        name: 'desc',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8287743374826164088),
        name: 'initQuerys',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4690926171000995925),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5475873554467602001),
        name: 'latestOpenAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 7819267361613010979),
        name: 'stDbType',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 4520754541798440120),
        name: 'stCustom',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 8749264689524785390),
        name: 'stActiveSchemas',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 7763174657391623643),
    name: 'SettingsStorage',
    lastPropertyId: const obx_int.IdUid(3, 5314647270738127679),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 390357101932384688),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5521178418702823783),
        name: 'theme',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5314647270738127679),
        name: 'language',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(6, 7763174657391623643),
    lastIndexId: const obx_int.IdUid(2, 3493315780447542151),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [
      4777369979113529251,
      7771770525022327494,
      4128249689244104183,
    ],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      6339393024853594017,
      2012876000864412152,
      3055836543278863247,
      2576353234273015585,
      4402971908614233426,
      2557526817954957013,
      1533736204012627434,
      8657086904403898878,
      7449270155428902133,
      7099609988433500239,
      8699536140751700883,
      6180271050918009273,
      7938579034731173175,
      5382849423225960488,
      451105937567216074,
      3794023625132426927,
      9103170210888742968,
      5811083849693601533,
      8890379074780980911,
      4167208944430226304,
      984201060325373299,
      152208878262239042,
      5905217867648670601,
      1629092070617964904,
      4775537481234876128,
      3321563170577621728,
      7345410915938135096,
      6439919288390320832,
      6403594309000127769,
      452695194295216491,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    SessionStorage: obx_int.EntityDefinition<SessionStorage>(
      model: _entities[0],
      toOneRelations: (SessionStorage object) => [object.instance],
      toManyRelations: (SessionStorage object) => {},
      getId: (SessionStorage object) => object.id,
      setId: (SessionStorage object, int id) {
        object.id = id;
      },
      objectToFB: (SessionStorage object, fb.Builder fbb) {
        final textOffset =
            object.text == null ? null : fbb.writeString(object.text!);
        final currentSchemaOffset =
            object.currentSchema == null
                ? null
                : fbb.writeString(object.currentSchema!);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.instance.targetId);
        fbb.addOffset(2, textOffset);
        fbb.addOffset(3, currentSchemaOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final textParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final currentSchemaParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final object = SessionStorage(
          id: idParam,
          text: textParam,
          currentSchema: currentSchemaParam,
        );
        object.instance.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.instance.attach(store);
        return object;
      },
    ),
    InstanceStorage: obx_int.EntityDefinition<InstanceStorage>(
      model: _entities[1],
      toOneRelations: (InstanceStorage object) => [],
      toManyRelations: (InstanceStorage object) => {},
      getId: (InstanceStorage object) => object.id,
      setId: (InstanceStorage object, int id) {
        object.id = id;
      },
      objectToFB: (InstanceStorage object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final hostOffset = fbb.writeString(object.host);
        final userOffset = fbb.writeString(object.user);
        final passwordOffset = fbb.writeString(object.password);
        final descOffset = fbb.writeString(object.desc);
        final initQuerysOffset = fbb.writeList(
          object.initQuerys.map(fbb.writeString).toList(growable: false),
        );
        final stCustomOffset = fbb.writeString(object.stCustom);
        final stActiveSchemasOffset = fbb.writeList(
          object.stActiveSchemas.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(14);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, hostOffset);
        fbb.addInt64(3, object.port);
        fbb.addOffset(4, userOffset);
        fbb.addOffset(5, passwordOffset);
        fbb.addOffset(6, descOffset);
        fbb.addOffset(7, initQuerysOffset);
        fbb.addInt64(8, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(9, object.latestOpenAt?.millisecondsSinceEpoch);
        fbb.addInt64(10, object.stDbType);
        fbb.addOffset(11, stCustomOffset);
        fbb.addOffset(12, stActiveSchemasOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final latestOpenAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          22,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final stDbTypeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final hostParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final portParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final userParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final passwordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final descParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final stCustomParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final initQuerysParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 18, []);
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
        );
        final latestOpenAtParam =
            latestOpenAtValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(latestOpenAtValue);
        final object = InstanceStorage(
            id: idParam,
            stDbType: stDbTypeParam,
            name: nameParam,
            host: hostParam,
            port: portParam,
            user: userParam,
            password: passwordParam,
            desc: descParam,
            stCustom: stCustomParam,
            initQuerys: initQuerysParam,
            createdAt: createdAtParam,
            latestOpenAt: latestOpenAtParam,
          )
          ..stActiveSchemas = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 28, []);

        return object;
      },
    ),
    SettingsStorage: obx_int.EntityDefinition<SettingsStorage>(
      model: _entities[2],
      toOneRelations: (SettingsStorage object) => [],
      toManyRelations: (SettingsStorage object) => {},
      getId: (SettingsStorage object) => object.id,
      setId: (SettingsStorage object, int id) {
        object.id = id;
      },
      objectToFB: (SettingsStorage object, fb.Builder fbb) {
        final themeOffset = fbb.writeString(object.theme);
        final languageOffset = fbb.writeString(object.language);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, themeOffset);
        fbb.addOffset(2, languageOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final themeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final languageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = SettingsStorage(
          id: idParam,
          theme: themeParam,
          language: languageParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [SessionStorage] entity fields to define ObjectBox queries.
class SessionStorage_ {
  /// See [SessionStorage.id].
  static final id = obx.QueryIntegerProperty<SessionStorage>(
    _entities[0].properties[0],
  );

  /// See [SessionStorage.instance].
  static final instance =
      obx.QueryRelationToOne<SessionStorage, InstanceStorage>(
        _entities[0].properties[1],
      );

  /// See [SessionStorage.text].
  static final text = obx.QueryStringProperty<SessionStorage>(
    _entities[0].properties[2],
  );

  /// See [SessionStorage.currentSchema].
  static final currentSchema = obx.QueryStringProperty<SessionStorage>(
    _entities[0].properties[3],
  );
}

/// [InstanceStorage] entity fields to define ObjectBox queries.
class InstanceStorage_ {
  /// See [InstanceStorage.id].
  static final id = obx.QueryIntegerProperty<InstanceStorage>(
    _entities[1].properties[0],
  );

  /// See [InstanceStorage.name].
  static final name = obx.QueryStringProperty<InstanceStorage>(
    _entities[1].properties[1],
  );

  /// See [InstanceStorage.host].
  static final host = obx.QueryStringProperty<InstanceStorage>(
    _entities[1].properties[2],
  );

  /// See [InstanceStorage.port].
  static final port = obx.QueryIntegerProperty<InstanceStorage>(
    _entities[1].properties[3],
  );

  /// See [InstanceStorage.user].
  static final user = obx.QueryStringProperty<InstanceStorage>(
    _entities[1].properties[4],
  );

  /// See [InstanceStorage.password].
  static final password = obx.QueryStringProperty<InstanceStorage>(
    _entities[1].properties[5],
  );

  /// See [InstanceStorage.desc].
  static final desc = obx.QueryStringProperty<InstanceStorage>(
    _entities[1].properties[6],
  );

  /// See [InstanceStorage.initQuerys].
  static final initQuerys = obx.QueryStringVectorProperty<InstanceStorage>(
    _entities[1].properties[7],
  );

  /// See [InstanceStorage.createdAt].
  static final createdAt = obx.QueryDateProperty<InstanceStorage>(
    _entities[1].properties[8],
  );

  /// See [InstanceStorage.latestOpenAt].
  static final latestOpenAt = obx.QueryDateProperty<InstanceStorage>(
    _entities[1].properties[9],
  );

  /// See [InstanceStorage.stDbType].
  static final stDbType = obx.QueryIntegerProperty<InstanceStorage>(
    _entities[1].properties[10],
  );

  /// See [InstanceStorage.stCustom].
  static final stCustom = obx.QueryStringProperty<InstanceStorage>(
    _entities[1].properties[11],
  );

  /// See [InstanceStorage.stActiveSchemas].
  static final stActiveSchemas = obx.QueryStringVectorProperty<InstanceStorage>(
    _entities[1].properties[12],
  );
}

/// [SettingsStorage] entity fields to define ObjectBox queries.
class SettingsStorage_ {
  /// See [SettingsStorage.id].
  static final id = obx.QueryIntegerProperty<SettingsStorage>(
    _entities[2].properties[0],
  );

  /// See [SettingsStorage.theme].
  static final theme = obx.QueryStringProperty<SettingsStorage>(
    _entities[2].properties[1],
  );

  /// See [SettingsStorage.language].
  static final language = obx.QueryStringProperty<SettingsStorage>(
    _entities[2].properties[2],
  );
}
